#!/sbin/sh

# Copyright 2010 Renaud Allard. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY Renaud Allard ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Renaud Allard OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of Renaud Allard.

VERSION=1.4.3

PATH=/bin:/sbin:/usr/bin/:/usr/sbin:/system/bin:/system/xbin

build_fs_current()
{
	echo 'DO NOT MODIFY THIS FILE, YOUR SYSTEM WOULD NOT BE ABLE TO BOOT' > /fugumod_sd/fugumod/fs.current
	mkdir /fugu_mnt
	for DEVICE in mmcblk0p2 stl10 stl11 stl9
	do
		mount -o ro /dev/block/${DEVICE} /fugu_mnt
		mount | awk '/\/fugu_mnt/ { print $1 " " $5 }' | awk -F "/" '{ print $4 }' >> /fugumod_sd/fugumod/fs.current
		umount /fugu_mnt
	done
	rmdir /fugu_mnt
}

date >/fugumod.log
echo "Version:$VERSION" >>/fugumod.log
uname -a >>/fugumod.log

# standard
mkdir /dev
mknod /dev/null c 1 3
mknod /dev/zero c 1 5
mknod /dev/urandom c 1 9

# internal & external SD
mkdir /dev/block
mknod /dev/block/mmcblk0 b 179 0
mknod /dev/block/mmcblk0p1 b 179 1
mknod /dev/block/mmcblk0p2 b 179 2
mknod /dev/block/mmcblk0p3 b 179 3
mknod /dev/block/mmcblk0p4 b 179 4
mknod /dev/block/mmcblk1 b 179 8
mknod /dev/block/stl1 b 138 1
mknod /dev/block/stl2 b 138 2
mknod /dev/block/stl3 b 138 3
mknod /dev/block/stl4 b 138 4
mknod /dev/block/stl5 b 138 5
mknod /dev/block/stl6 b 138 6
mknod /dev/block/stl7 b 138 7
mknod /dev/block/stl8 b 138 8
mknod /dev/block/stl9 b 138 9
mknod /dev/block/stl10 b 138 10
mknod /dev/block/stl11 b 138 11
mknod /dev/block/stl12 b 138 12

#ramzswap
mknod /dev/ramzswap0 b 253 0

mount -t proc proc /proc
mount -t sysfs sys /sys

insmod /lib/modules/fsr.ko
insmod /lib/modules/fsr_stl.ko

mkdir /fugumod_sd
mount -t vfat -o utf8 /dev/block/mmcblk0p1 /fugumod_sd

#Check if conf directory exists, if not create one
if ! test -d /fugumod_sd/fugumod
then
	rm -rf /fugumod_sd/fugumod
	mkdir /fugumod_sd/fugumod
fi

#Check if config exists, if not try to create it
build_fs_current

#Insert RFS modules if any filesystem is rfs
if grep vfat /fugumod_sd/fugumod/fs.current || grep rfs /fugumod_sd/fugumod/fs.convert
then
	echo "RFS detected: inserting modules" >> /fugumod.log
	insmod /rfs/rfs_glue.ko
	insmod /rfs/rfs_fat.ko
fi

#fsck filesystems
for DEVICE in mmcblk0p2 stl10 stl11 stl9
do
	case `grep ${DEVICE} /fugumod_sd/fugumod/fs.current | awk '{ print $2 }'` in
jfs)
	/sbin/jfs_fsck -p /dev/block/${DEVICE} >>/fugumod.log 2>>/fugumod.log
;;
ext*)
	/sbin/e2fsck /dev/block/${DEVICE} >>/fugumod.log 2>>/fugumod.log
;;
reiserfs)
	echo /sbin/reiserfsck /dev/block/${DEVICE} >>/fugumod.log 2>>/fugumod.log
;;
btrfs)
	/sbin/btrfsck /dev/block/${DEVICE} >>/fugumod.log 2>>/fugumod.log
;;
	esac
done

#convert remaining rfs to jfs
mkdir /fugumod_data
grep vfat /fugumod_sd/fugumod/fs.current | while read DEVICE CUR_FS
do
	mount -t rfs -o nosuid,nodev,check=no /dev/block/${DEVICE} /fugumod_data 2>>/fugumod.log
	echo "`date` : archiving ${DEVICE}" >>/fugumod.log
	cd /fugumod_data/
	tar cvf /fugumod_sd/fugumod_data.tar * >>/fugumod.log 2>>/fugumod.log
	cd /
	sync
	umount /dev/block/${DEVICE}
	echo "`date` : formatting data" >> /fugumod.log
	dd if=/dev/zero of=/dev/block/${DEVICE} bs=1024 count=10
	jfs_mkfs -q /dev/block/${DEVICE} >> /fugumod.log
	mount -t jfs -o rw,noatime,nodiratime,iocharset=utf8 /dev/block/${DEVICE} /fugumod_data
	echo "`date` : unarchiving ${DEVICE}" >> /fugumod.log
	cd /fugumod_data/
	tar xvf /fugumod_sd/fugumod_data.tar >>/fugumod.log 2>>/fugumod.log
	cd /
	sync
	umount /dev/block/${DEVICE}
done
#I assume conversion succeeded, if not we are going into trouble anyway and nothing will solve this
sed -i 's/vfat/jfs/' /fugumod_sd/fugumod/fs.current
rmdir /fugumod_data
rm /fugumod_sd/fugumod_data.tar

#check if we need to convert something (from sanitized output)
if test -f /fugumod_sd/fugumod/fs.convert
then
	mkdir /fugumod_data
	egrep "stl|mmc" /fugumod_sd/fugumod/fs.convert | tr '\011' ' ' | sed 's/ */ /g' | sed 's/^ *//g' | awk '{ print $1 " " $2 }' | while read DEVICE NEW_FS
	do
		CUR_FS=`grep ${DEVICE} /fugumod_sd/fugumod/fs.current | awk '{ print $2 }'`
		if [ "${CUR_FS}" != "${NEW_FS}" ]
		then
			echo "$DEVICE is in $CUR_FS and needs to be converted to $NEW_FS" >> /fugumod.log
			case ${NEW_FS} in
jfs)
MKFS='/sbin/jfs_mkfs -q '
;;
ext*)
MKFS='/sbin/mke2fs -J size=4 -T ext4 -b 4096 -O ^resize_inode,^ext_attr,^huge_file '
;;
reiserfs)
MKFS='/sbin/mkreiserfs -q -b 4096 -s 1000 '
;;
btrfs)
MKFS='/sbin/mkfs.btrfs -d single '
;;
esac
			mount -t ${CUR_FS} -o ro /dev/block/${DEVICE} /fugumod_data 2>>/fugumod.log
			echo "`date` : archiving ${DEVICE} for conversion" >>/fugumod.log
			mount |grep fugumod >>/fugumod.log
			cd /fugumod_data/
			tar cvf /fugumod_sd/fugumod_data.tar * >>/fugumod.log 2>>/fugumod.log
			cd /
			sync
			umount /dev/block/${DEVICE}
			echo "`date` : formatting ${DEVICE} for conversion" >>/fugumod.log
			dd if=/dev/zero of=/dev/block/${DEVICE} bs=1024 count=10
			${MKFS} /dev/block/${DEVICE} >> /fugumod.log 2>> /fugumod.log
			mount -t ${NEW_FS} -o rw,noatime,nodiratime /dev/block/${DEVICE} /fugumod_data
			echo "`date` : unarchiving ${DEVICE}" >>/fugumod.log
			cd /fugumod_data/
			tar xvf /fugumod_sd/fugumod_data.tar >>/fugumod.log 2>>/fugumod.log
			cd /
			sync
			umount /dev/block/${DEVICE}
		fi
	done
	rm /fugumod_sd/fugumod/fs.convert
	rmdir /fugumod_data
	#regenerate a fs.current
	build_fs_current
	rm /fugumod_sd/fugumod_data.tar
fi

# get filesystems
STL9_FS=`grep stl9 /fugumod_sd/fugumod/fs.current | awk '{ print $2 }' | sed 's/ext2/ext4/'`
STL10_FS=`grep stl10 /fugumod_sd/fugumod/fs.current | awk '{ print $2 }' | sed 's/ext2/ext4/'`
STL11_FS=`grep stl11 /fugumod_sd/fugumod/fs.current | awk '{ print $2 }' | sed 's/ext2/ext4/'`
MMC_FS=`grep mmcblk0p2 /fugumod_sd/fugumod/fs.current | awk '{ print $2 }' | sed 's/ext2/ext4/'`

case $STL9_FS in
jfs)
	STL9_MNT=',iocharset=utf8'
;;
ext*)
	STL9_MNT=',data=writeback,noauto_da_alloc,barrier=0'
;;
reiserfs)
	STL9_MNT='notail'
;;
esac
case $STL10_FS in
jfs)
	STL10_MNT=',iocharset=utf8'
;;
ext*)
	STL10_MNT=',nodelalloc,data=ordered,noauto_da_alloc,barrier=0'
;;
reiserfs)
	STL10_MNT='notail'
;;
esac
case $STL11_FS in
jfs)
	STL11_MNT=',iocharset=utf8'
;;
ext*)
	STL11_MNT=',data=writeback,noauto_da_alloc,barrier=0'
;;
reiserfs)
	STL11_MNT='notail'
;;
esac
case $MMC_FS in
jfs)
	MMC_MNT=',iocharset=utf8'
;;
ext*)
	MMC_MNT=',data=ordered,noauto_da_alloc,barrier=1'
;;
reiserfs)
	MMC_MNT='notail'
;;
btrfs)
	MMC_MNT='nodatacow,compress,ssd'
;;
esac
	
# Kill that stupid autoformatter
mount -t ${STL9_FS} -o rw${STL9_MNT} /dev/block/stl9 /system
rm /system/bin/fat.format
ln -s /sbin/fat.format /system/bin/fat.format

# Mount data since it will be used for tests afterwards anyway
mount -t ${MMC_FS} -o rw${MMC_MNT} /dev/block/mmcblk0p2 /data

#install various things
if [ ! -f /system/Renaud_Allard.$VERSION ]
then

# erase all old flags
    rm /system/Renaud_Allard*

# ensure /system/xbin exists
    mkdir /system/xbin
    chmod 755 /system/xbin

# su
    rm /system/bin/su
    rm /system/xbin/su
    cp /res/misc/su /system/xbin/
    chown 0.0 /system/xbin/su
    chmod 4755 /system/xbin/su

# Superuser
    rm /system/app/Superuser.apk
    rm /data/app/Superuser.apk
    cp /res/misc/Superuser.apk /system/app/
    chown 0.0 /system/app/Superuser.apk
    chmod 644 /system/app/Superuser.apk

# FuguApp
    rm /system/app/fuguapp.apk
#    rm /data/app/fuguapp.apk
#    cp /res/misc/fuguapp.apk /system/app/

# Change GPS settings
    sed -i 's/north-america/europe/' /system/etc/gps.conf

# Remove noisy startup/shutdown sounds
#    mv /system/etc/PowerOn.wav /system/etc/PowerOn.wav.disabled
#    mv /system/media/audio/ui/shutdown.ogg /system/media/audio/ui/shutdown.ogg.disabled
    rm /system/etc/PowerOn.wav /system/media/audio/ui/shutdown.ogg

# install backlight lib
    cp /res/misc/liblight_binary/lights.s5pc110.so /system/lib/hw/

# Dirty hack to get back notification sounds
    cp -r /system/media/audio/notifications /fugumod_sd/
    cp -r /system/media/audio/ringtones /fugumod_sd/
    cp -r /system/media/audio/alarms /fugumod_sd/

# clear Dalvik cache as it can cause issues when upgrading
#   rm -rf /data/dalvik-cache/* && echo "Dalvik cache cleared" >> /fugumod.log

# remove some useless Kies processes
    rm /system/bin/drexe /system/bin/npsmobex

# Once be enough
    echo 1 > /system/Renaud_Allard.$VERSION

fi;

# Has EFS been erased? If yes, recreate it.
# That's a basic check, I don't really check contents but that more when someone rm -rf /data/*
if [ ! -d /data/efs ]
then
# Copy /efs
    insmod /rfs/rfs_glue.ko
    insmod /rfs/rfs_fat.ko
    mkdir /fugumod_efs
    mount -t rfs -o ro,nosuid,nodev,check=no /dev/block/stl3 /fugumod_efs
    mkdir /data/efs
    cp -rp /fugumod_efs/* /data/efs/
    cp -rp /fugumod_efs/.* /data/efs/
    chown -R 1001:1001 /data/efs
    chmod 0771 /data/efs
    umount /fugumod_efs
    rmdir /fugumod_efs
fi

# Test if bootanimation is present and playable and if it is make the service
if test -f /data/local/bootanimation.zip || test -f /system/media/bootanimation.zip && test -f /system/bin/bootanimation; then
	echo 'service bootanim /system/bin/bootanimation
		user graphics
		group graphics
		disabled
		oneshot' >> init.rc
	else
	echo 'service playlogos1 /system/bin/playlogos1
		user root
		oneshot' >> init.rc
fi

# Mount dbdata to fix permissions
mkdir -p /dbdata
mount -t ${STL10_FS} -o rw${STL10_MNT} /dev/block/stl10 /dbdata
/sbin/fix_permissions >>/fugumod.log

# remove temporary stuff to free memory
rm /res/misc/Superuser.apk

# enable ramzswap
/sbin/rzscontrol /dev/ramzswap0 --init
/sbin/swapon /dev/ramzswap0

# modify mount options to inject in android inits
STL9_MNT=`echo ${STL9_MNT} | sed 's/\,/ /g'`
STL10_MNT=`echo ${STL10_MNT} | sed 's/\,/ /g'`
STL11_MNT=`echo ${STL11_MNT} | sed 's/\,/ /g'`
MMC_MNT=`echo ${MMC_MNT} | sed 's/\,/ /g'`

# Inline inject mountpoints
sed -i "s|fugu_mount_stl9|mount ${STL9_FS} /dev/block/stl9 /system nodev relatime nodiratime ro ${STL9_MNT}|" /init.rc
sed -i "s|fugu_mount_stl9|mount ${STL9_FS} /dev/block/stl9 /system nodev relatime nodiratime rw ${STL9_MNT}|" /recovery.rc
sed -i "s|fugu_mount_stl10|mount ${STL10_FS} /dev/block/stl10 /dbdata sync noexec relatime nodiratime nosuid nodev rw ${STL10_MNT}|" /init.rc /recovery.rc
sed -i "s|fugu_mount_stl11|mount ${STL11_FS} /dev/block/stl11 /cache sync noexec relatime nodiratime nosuid nodev rw ${STL11_MNT}|" /init.rc /recovery.rc
sed -i "s|fugu_mount_mmcblk0p2|mount ${MMC_FS} /dev/block/mmcblk0p2 /data relatime nodiratime nosuid nodev rw ${MMC_MNT}|" /init.rc /recovery.rc

# unmount all filesystems

umount /dbdata
umount /data
umount /system
umount /dev/block/mmcblk0p1
rmdir /fugumod_sd
#remove fake etc which is only useful to format filesystems
rm -rf /etc

exec /init_samsung

