#!/sbin/sh

# Copyright 2010 Renaud Allard. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY Renaud Allard ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Renaud Allard OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of Renaud Allard.

VERSION=0.14

PATH=/bin:/sbin:/usr/bin/:/usr/sbin:/system/bin:/system/xbin

date > /jfsmod.log

# standard
mkdir /dev
mknod /dev/null c 1 3
mknod /dev/zero c 1 5
mknod /dev/urandom c 1 9

# internal & external SD
mkdir /dev/block
mknod /dev/block/mmcblk0 b 179 0
mknod /dev/block/mmcblk0p1 b 179 1
mknod /dev/block/mmcblk0p2 b 179 2
mknod /dev/block/mmcblk0p3 b 179 3
mknod /dev/block/mmcblk0p4 b 179 4
mknod /dev/block/mmcblk1 b 179 8
mknod /dev/block/stl1 b 138 1
mknod /dev/block/stl2 b 138 2
mknod /dev/block/stl3 b 138 3
mknod /dev/block/stl4 b 138 4
mknod /dev/block/stl5 b 138 5
mknod /dev/block/stl6 b 138 6
mknod /dev/block/stl7 b 138 7
mknod /dev/block/stl8 b 138 8
mknod /dev/block/stl9 b 138 9
mknod /dev/block/stl10 b 138 10
mknod /dev/block/stl11 b 138 11
mknod /dev/block/stl12 b 138 12

mount -t proc proc /proc
mount -t sysfs sys /sys

insmod /lib/modules/fsr.ko
insmod /lib/modules/fsr_stl.ko

mkdir /jfsmod_sd
mount -t vfat -o utf8 /dev/block/mmcblk0p1 /jfsmod_sd

if /sbin/jfs_fsck -p /dev/block/mmcblk0p2 >> /jfsmod.log
then
	echo "`date` : fsck is OK, so we are definitely on jfs already" >> /jfsmod.log
	for DEVICE in mmcblk0p2 stl10 stl11 stl9
	do
		/sbin/jfs_fsck -p /dev/block/$DEVICE >> /jfsmod.log
	done
else
	insmod /rfs/rfs_glue.ko
	insmod /rfs/rfs_fat.ko
	echo "list inserted modules `lsmod`" >> /jfsmod.log
	echo "`date` :fsck failed so, we are probably on rfs or there is a huge problem, better reformat than BSOD" >> /jfsmod.log
	mkdir /jfsmod_data

	for DEVICE in mmcblk0p2 stl10 stl11 stl9
	do
		REFORMAT=YES
		echo "mount $DEVICE" >> /jfsmod.log
		# if we cannot mount in rfs, that means it's corrupted jfs and should be cleared
		mount -t rfs -o nosuid,nodev,check=no /dev/block/$DEVICE /jfsmod_data
		echo "`date` : archiving data" >> /jfsmod.log
		cd /jfsmod_data/
		tar cf /jfsmod_sd/jfsmod_data.tar *
		cd /
		sync
		umount /dev/block/$DEVICE
		#ensure we don't reformat /system after a conversion because that would hurt
		if [ $DEVICE == 'stl9' ]
			then
			if /sbin/jfs_fsck -p /dev/block/$DEVICE
			then
				echo "system was already jfs, so we don't reformat" >> /jfsmod.log
				REFORMAT=NO
			fi
		fi
		if [ REFORMAT == 'NO' ]
		then
			echo "`date` : ack no reformat for /system" >> /jfsmod.log
		else
			echo "`date` : formatting data" >> /jfsmod.log
			dd if=/dev/zero of=/dev/block/$DEVICE bs=1024 count=10
			jfs_mkfs -q /dev/block/$DEVICE >> /jfsmod.log
			mount -t jfs -o rw,noatime,nodiratime,iocharset=utf8 /dev/block/$DEVICE /jfsmod_data
			echo "`date` : unarchiving data" >> /jfsmod.log
			cd /jfsmod_data/
			tar xf /jfsmod_sd/jfsmod_data.tar
			cd /
			sync
			umount /dev/block/$DEVICE
		fi
	done

	rm /jfsmod_sd/jfsmod_data.tar
fi


# Kill that stupid autoformatter
mount -t jfs -o rw,iocharset=utf8 /dev/block/stl9 /system
rm /system/bin/fat.format
ln -s /sbin/fat.format /system/bin/fat.format

# Mount data since it will be used for tests afterwards anyway
mount -t jfs -o rw,iocharset=utf8 /dev/block/mmcblk0p2 /data

#install superuser 
if [ ! -f /system/Renaud_Allard.$VERSION ]
then

# erase all old flags
    rm /system/Renaud_Allard*

# ensure /system/xbin exists
    mkdir /system/xbin
    chmod 755 /system/xbin

# su
    rm /system/bin/su
    rm /system/xbin/su
    cp /res/misc/su /system/xbin/
    chown 0.0 /system/xbin/su
    chmod 4755 /system/xbin/su

# Superuser
    rm /system/app/Superuser.apk
    rm /data/app/Superuser.apk
    cp /res/misc/Superuser.apk /system/app/
    chown 0.0 /system/app/Superuser.apk
    chmod 644 /system/app/Superuser.apk

# Change GPS settings
    sed -i 's/north-america/europe/' /system/etc/gps.conf

# Remove noisy startup/shutdown sounds
#    mv /system/etc/PowerOn.wav /system/etc/PowerOn.wav.disabled
#    mv /system/media/audio/ui/shutdown.ogg /system/media/audio/ui/shutdown.ogg.disabled
    rm /system/etc/PowerOn.wav /system/media/audio/ui/shutdown.ogg

# install backlight lib
    cp /res/misc/liblight_binary/lights.s5pc110.so /system/lib/hw/

# Dirty hack to get back notification sounds
    cp -r /system/media/audio/notifications /jfsmod_sd/
    cp -r /system/media/audio/ringtones /jfsmod_sd/
    cp -r /system/media/audio/alarms /jfsmod_sd/

# clear Dalvik cache as it can cause issues when upgrading
#   rm -rf /data/dalvik-cache/* && echo "Dalvik cache cleared" >> /jfsmod.log

# Once be enough
    echo 1 > /system/Renaud_Allard.$VERSION

fi;

# Has EFS been erased? If yes, recreate it.
# That's a basic check, I don't really check contents but that more when someone rm -rf /data/*
if [ ! -d /data/efs ]
then
# Copy /efs
    insmod /rfs/rfs_glue.ko
    insmod /rfs/rfs_fat.ko
    mkdir /jfsmod_efs
    mount -t rfs -o ro,nosuid,nodev,check=no /dev/block/stl3 /jfsmod_efs
    mkdir /data/efs
    cp -rp /jfsmod_efs/* /data/efs/
    cp -rp /jfsmod_efs/.* /data/efs/
    chown -R 1001:1001 /data/efs
    chmod 0771 /data/efs
    umount /jfsmod_efs
    rmdir /jfsmod_efs
fi

# Test if bootanimation is present and playable and if it is make the service
if test -f /data/local/bootanimation.zip || test -f /system/media/bootanimation.zip && test -f /system/bin/bootanimation; then
	echo 'service bootanim /system/bin/bootanimation
		user graphics
		group graphics
		disabled
		oneshot' >> init.rc
	else
	echo 'service playlogos1 /system/bin/playlogos1
		user root
		oneshot' >> init.rc
fi

# Mount dbdata to fix permissions
#mount -t jfs -o rw,iocharset=utf8 /dev/block/stl10 /dbdata
#/sbin/fix_permissions >> /jfsmod.log

# unmount all filesystems

#umount /dbdata
umount /data
umount /system
umount /dev/block/mmcblk0p1
rmdir /jfsmod_sd

exec /init_samsung

